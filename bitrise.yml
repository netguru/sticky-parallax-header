---
format_version: '11'
default_step_lib_source: 'https://github.com/bitrise-io/bitrise-steplib.git'
project_type: react-native
meta:
  bitrise.io:
    stack: osx-xcode-13.2.x
app:
  envs:
  - opts:
      is_expand: false
    WORKDIR: "."
  - opts:
      is_expand: false
    EXAMPLE_WORKDIR: "./example"
  - opts:
      is_expand: false
    EXAMPLE_ANDROID_PROJECT: "./example/android"
  - opts:
      is_expand: false
    EXAMPLE_ANDROID_RELEASE_VARIANT: "release"
  - opts:
      is_expand: false
    EXAMPLE_IOS_PROJECT: "./example/ios/reactnativestickyparallaxheaderexample.xcworkspace"
  - opts:
      is_expand: false
    EXAMPLE_IOS_RELEASE_SCHEME: "reactnativestickyparallaxheaderexamplerelease"
trigger_map:
- pull_request_source_branch: '*'
  pull_request_target_branch: master
  workflow: lint
workflows:
  lint:
    description: >
      Run ESLint & TypeScript
    steps:
    - activate-ssh-key@4: {}
    - git-clone@6: {}
    - yarn@0:
        inputs:
        - workdir: "$WORKDIR"
        - command: install
    - yarn@0:
        inputs:
        - workdir: "$WORKDIR"
        - command: lint
    - yarn@0:
        inputs:
        - workdir: "$WORKDIR"
        - command: typescript
    - deploy-to-bitrise-io@2: {}
  prod_android:
    description: >
      Create Android release build
    steps:
    - activate-ssh-key@4: {}
    - git-clone@6: {}
    - cache-pull@2: {}
    - yarn@0:
        inputs:
        - workdir: "$WORKDIR"
        - command: install
    - yarn@0:
        inputs:
        - workdir: "$EXAMPLE_WORKDIR"
        - command: install
    - android-build@1:
        inputs:
        - build_type: apk
        - project_location: "$EXAMPLE_ANDROID_PROJECT"
        - variant: "$EXAMPLE_ANDROID_RELEASE_VARIANT"
    - cache-push@2:
        inputs:
          - cache_paths: |-
              $HOME/.rbenv
              $EXAMPLE_WORKDIR/ios/Pods
              $EXAMPLE_WORKDIR/node_modules
              $WORKDIR/node_modules
              $HOME/.gradle
              $EXAMPLE_ANDROID_PROJECT/.gradle
          - ignore_check_on_paths: |-
              $HOME/.gradle/caches/*.lock
              $EXAMPLE_ANDROID_PROJECT/.gradle/*.lock
              $EXAMPLE_ANDROID_PROJECT/.gradle/*.bin
    - deploy-to-bitrise-io@2: {}
  prod_android_with_appium_tests:
    description: >
      Create Android release build and run Appium tests
    steps:
      - activate-ssh-key@4: { }
      - git-clone@6: { }
      - yarn@0:
          inputs:
            - workdir: "$WORKDIR"
            - command: install
      - yarn@0:
          inputs:
            - workdir: "$EXAMPLE_WORKDIR"
            - command: install
      - android-build@1:
          inputs:
            - build_type: apk
            - project_location: "$EXAMPLE_ANDROID_PROJECT"
            - variant: "$EXAMPLE_ANDROID_RELEASE_VARIANT"
      - deploy-to-bitrise-io@2: { }
      - script@1:
          inputs:
            - content: |-
                #!/usr/bin/env bash
                # fail if any commands fails
                set -ex
                brew update
                brew install jq
                result=$(curl -X GET "https://api.bitrise.io/v0.1/apps/${BITRISE_APP_SLUG}/builds/${BITRISE_BUILD_SLUG}/artifacts" -H "accept: application/json" -H "Authorization: ${BITRISE_ACCESS_TOKEN}" | jq -r .data[0].slug)
                artifactSlug=$(curl -X GET "https://api.bitrise.io/v0.1/apps/${BITRISE_APP_SLUG}/builds/${BITRISE_BUILD_SLUG}/artifacts/${result}" -H "accept: application/json" -H "Authorization: ${BITRISE_ACCESS_TOKEN}" | jq -r .data.expiring_download_url)
                export APPIUM_ARTIFACT_URL=${artifactSlug}
                echo "${APPIUM_ARTIFACT_URL}"
                curl --location --request POST 'https://api.bitrise.io/v0.1/apps/a83b4e4adbd2a88d/builds' --header "Authorization: ${BITRISE_ACCESS_TOKEN}" --header 'Content-Type: application/json' --data-raw '{ "hook_info": { "type": "bitrise" }, "build_params": { "branch": "main", "workflow_id": "run_pixel_4", "environments": [{ "is_expand": true, "mapped_to": "APPIUM_ARTIFACT_URL", "value": "'"$APPIUM_ARTIFACT_URL"'" }]}}'
                curl --location --request POST 'https://api.bitrise.io/v0.1/apps/a83b4e4adbd2a88d/builds' --header "Authorization: ${BITRISE_ACCESS_TOKEN}" --header 'Content-Type: application/json' --data-raw '{ "hook_info": { "type": "bitrise" }, "build_params": { "branch": "main", "workflow_id": "run_samsung_j7", "environments": [{ "is_expand": true, "mapped_to": "APPIUM_ARTIFACT_URL", "value": "'"$APPIUM_ARTIFACT_URL"'" }]}}'
          title: Kick off appium tests
  prod_ios:
    description: >
      Create iOS release build
    steps:
    - activate-ssh-key@4: {}
    - git-clone@6: {}
    - cache-pull@2: {}
    - script:
        inputs:
          - content: |-
              #!/bin/bash
              set -ex
              selected_version=$(cat $EXAMPLE_WORKDIR/.ruby-version)
              rbenv_versions=$(rbenv versions)
              if [[ $rbenv_versions =~ $selected_version ]]
              then
                $(rbenv local $selected_version)
              else
                $(rbenv install $selected_version)
              fi
    - yarn@0:
        inputs:
        - workdir: "$WORKDIR"
        - command: install
    - yarn@0:
        inputs:
        - workdir: "$EXAMPLE_WORKDIR"
        - command: install
    - cocoapods-install@2: {}
    - xcode-build-for-simulator@0:
        inputs:
          - project_path: '$EXAMPLE_IOS_PROJECT'
          - scheme: '$EXAMPLE_IOS_RELEASE_SCHEME'
          - simulator_device: 'iPhone 13'
          - simulator_os_version: latest
    - script:
        inputs:
          - content: |-
              #!/bin/bash
              zip -r $BITRISE_DEPLOY_DIR/app.zip $BITRISE_APP_DIR_PATH
    - cache-push@2:
        inputs:
          - cache_paths: |-
              $HOME/.rbenv
              $EXAMPLE_WORKDIR/ios/Pods
              $EXAMPLE_WORKDIR/node_modules
              $WORKDIR/node_modules
              $HOME/.gradle
              $EXAMPLE_ANDROID_PROJECT/.gradle
          - ignore_check_on_paths: |-
              $HOME/.gradle/caches/*.lock
              $EXAMPLE_ANDROID_PROJECT/.gradle/*.lock
              $EXAMPLE_ANDROID_PROJECT/.gradle/*.bin
    - deploy-to-bitrise-io@2: {}
  _release:
    description: >
      Publish to NPM reusable workflow (template)
    steps:
    - activate-ssh-key@4: {}
    - git-clone@6: {}
    - yarn@0:
        inputs:
        - workdir: "$WORKDIR"
        - command: install
    - yarn@0:
        inputs:
        - workdir: "$EXAMPLE_WORKDIR"
        - command: install
    - script:
        inputs:
        - content: |-
            git config --global user.email "react@netguru.co"
            git config --global user.name "netguru"
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > .npmrc
            if [[ $PRE_RELEASE == true ]]
            then
              yarn release --preRelease=rc --ci --npm.skipChecks
            else
              yarn release --increment=$INCREMENT --ci --npm.skipChecks
            fi
    - deploy-to-bitrise-io@2: {}
  pre-release:
    description: >
      Create release candidate and publish it to npm
    envs:
      - opts:
          - is_expand: false
        PRE_RELEASE: true
    after_run:
      - _release
  release-major:
    description: >
      Create major release and publish it to npm
    envs:
      - opts:
          - is_expand: false
        INCREMENT: major
    after_run:
      - _release
  release-minor:
    description: >
      Create minor release and publish it to npm
    envs:
      - opts:
          - is_expand: false
        INCREMENT: minor
    after_run:
      - _release
  release-patch:
    description: >
      Create patch release and publish it to npm
    envs:
      - opts:
          - is_expand: false
        INCREMENT: patch
    after_run:
      - _release
